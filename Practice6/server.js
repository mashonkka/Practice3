const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const fs = require('fs')
const WebSocket = require('ws'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket

const { ApolloServer, gql } = require('apollo-server-express'); // –î–æ–±–∞–≤–ª—è–µ–º GraphQL


const app = express();
const PORT = 3000;

const swaggerJsDoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const dataFilePath = path.join(__dirname, './products.json');

// Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
const swaggerOptions = {
    swaggerDefinition: {
        openapi: '3.0.0',
        info: {
            title: 'Task Management API',
            version: '1.0.0',
            description: 'API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏',
        },
        servers: [
            {
                url: 'http://localhost:3000',
            },
        ],
    },
    apis: ['openapi.yaml'], // —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
};

const swaggerDocs = swaggerJsDoc(swaggerOptions);
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs));

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(bodyParser.json());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
const readData = () => {
    try {
        const data = fs.readFileSync(dataFilePath, 'utf8');
        return JSON.parse(data);
    } catch (err) {
        return []; // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ JSON
const writeData = (data) => {
    fs.writeFileSync(dataFilePath, JSON.stringify(data, null, 2), 'utf8');
};

const typeDefs = gql`
  type Product {
    id: ID!
    name: String!
    price: Float!
    description: String
    categories: [String]
  }

  type Query {
    products: [Product]
    product(id: ID!): Product
  }
`;

const resolvers = {
    Query: {
        products: () => readData(), 
        product: (_, { id }) => readData().find(p => p.id == id),
    }
};

const server = new ApolloServer({ typeDefs, resolvers });

app.use(express.static(path.join(__dirname, '../Practice5')));

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '../Practice5/index.html'));
});

app.get('/admin',(req, res) => {
    res.status(404).sendFile(path.join(__dirname, 'admin.html'));
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
let products = readData();

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
app.get('/products', (req, res) => {
    res.json(products);
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
app.post('/products', (req, res) => {
    const newProduct = {
        id: products.length > 0 ? products[products.length - 1].id + 1 : 1,
        name: req.body.name,
        price: req.body.price,
        description: req.body.description,
        categories: req.body.categories
    };
    products.push(newProduct);
    writeData(products);
    res.status(201).json(newProduct);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
app.get('/products/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    const product = products.find(p => p.id === productId);
    if (product) {
        res.json(product);
    } else {
        res.status(404).json({ message: 'Product not found' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
app.put('/products/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    const product = products.find(p => p.id === productId);
    if (product) {
        product.name = req.body.name !== undefined ? req.body.name : product.name;
        product.price = req.body.price !== undefined ? req.body.price : product.price;
        product.category = req.body.category !== undefined ? req.body.category : product.category;
        writeData(products); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON
        res.json(product);
    } else {
        res.status(404).json({ message: 'Product not found' });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
app.delete('/products/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    const newProducts = products.filter(p => p.id !== productId);
    if (newProducts.length !== products.length) {
        products = newProducts;
        writeData(products); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON
        res.status(204).send();
    } else {
        res.status(404).json({ message: 'Product not found' });
    }
});


async function startServer() {
    await server.start();
    server.applyMiddleware({ app });

    app.listen(PORT, () => {
        console.log(`GraphQL API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}/graphql`);
        console.log(`Swagger API Docs: http://localhost:${PORT}/api-docs`);
    });

    const wss = new WebSocket.Server({ port: 8080 }); // WebSocket-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8080

    wss.on('connection', (ws) => {
        console.log('–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É');

        ws.on('message', (message) => {
            console.log('üì© –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', message.toString());
        
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
            wss.clients.forEach(client => {
                if (client !== ws && client.readyState === WebSocket.OPEN) {
                    client.send(JSON.stringify({ text: message.toString() })); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON
                }
            });
        });        

        ws.on('close', () => {
            console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
        });
    });

    console.log('WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:8080');
}

startServer(); // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞

